<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IP-DAY2</title>
</head>
<body>
    <script>

        //Question1.What is meant by first class functions?
// 1. First Class Functions
// First Class Function : It is also called as first class citizen function, there are three points
// to remember are below:
// 1. Function can be assigned to a variables.
 

let myFunction = function(){
     console.log('This is function that is assigned to a variable');
     }
    myFunction();


// 2. Function can be passed as an argument to other function.
 

  function executeFn(functionAsArgument) {
    functionAsArgument();
  }
  executeFn(function printHello() {
    console.log("Hi I am function passed as an argument so I am a first class Function");
  }); // passing printHello function as an argument.


  // 3.Function can be returned from other function

  function getFunction() {
    return function(){
      console.log("I am function returned from another function so i am a first-class function")
    }
  }
  let fn = getFunction();
  fn(); // this will call the returned function




//Question2.Explain call(),apply(),and blind() methods.Give an example of call(),apply(),blind().

// CALL, BIND AND APPLY IN JAVASCRIPT------------------
// These are just different ways of invoking or calling a function
//  When you are calling a function using any of these 3 then you dont have to define in the function that it will be taking obj as a parameter
// It will assume that the first argument which is coming while calling the function will be an object only.
//creating an object for the reference
let user = {
    name : "Shubham",
    age : 23,
    salary : 50000,
    city : "Ahmedabad"
}
let user2 = {
    name : "Vishnu",
    age : 21,
    salary : 60000,
    city : "Kashmir"
}
// creating a function which will be using this object
// When using call bind or apply
function UserDetails(company, designation) {
    console.log("Hello inside function", this);
    console.log(this.name + " is " + this.age + " years old. ", company, " ", designation);
}
//  Call : In case of call each and every argument which is required to be passed to the function will be passed individually.
UserDetails.call(user2, "Google", "Backend Developer");
//  Apply : In case of apply each and every argument which is required to be passed to the function will be passed inside an array .
UserDetails.apply(user2, ["Amazon", " Full Stack Developer"]);
// Bind : In case of bind, it will return you a new function. And this new function you can use anytime anywhere.
const newFunction = UserDetails.bind(user);
newFunction("Flipkart", "Data Scientist")





//Q3.What are objects in javascript?

// Objects in JavaScript
// Objects are the non-primitive datatypes and are use to store multiple data in the form of key value pairs
const ObjName = {
   name : 'Sajidha',
   age : 24,
}
console.log('I am ' + ObjName.age + 'years old ');


//Q4.What are function constructors?
// Function Constructor
// Function constructor is kind of regular function to create multiple objects at a time. 
//When creating function constructor, it is good practice to keep the first letter of the name, capital.
//  new keyword is mandatory to be used with function constructor.
// function Person(name, salary){
//     this.name = name,
//     this.salary = salary
// }
// const person1 = new Person('sanjay', 50000);
// console.log(person1.name);




// Q5 & Q6.What is prototype and Prototype chaining?
function Person(name, age){
    this.name = name;
    this.age=age;
    
 }
 let person1 = new Person("Anwar",23);
 let person2 = new Person("Shanth",45);
 console.log(person1);
 console.log(person2);
 //in case, if you want to add other properties by using function constructor.
person1.salary = 50000;
console.log(person1);
// in case when you want to add properties inside the function constructor.
Person.prototype.Nationality = "India";
person1.Nationality = "American";
console.log(person1.Nationality);


//Q7.Give an example of inheritance using function constructor.
// Example of inheritance using function constructor
function Animal(name, color){
    this.name = name;
    this.color = color;
}
function AnimalDescription(name, color, age, sound){
    Animal.call (this, name, color);
    this.age = age;
    this.sound = sound;
}
let Animal1 = new AnimalDescription('Bruno', 'Dark', 2, 'Barks')
// console.log(Animal.prototype);
console.log(Animal1);

//Q8.What are call backs.
// CALL BACK: function which is passed as argument to another function.
function output(callback){
    console.log("out");
    callback();
};
function input(){
    console.log("in");}
output(input);


//Q9.What is the use of setTimeOut.
//The callbacks are needed because javascript is an event driven language. 
//That means instead of waiting for a response javascript will keep executing while listening for other events.
// Let's take an example with the first function invoking an API call(simulated by setTimeout) and the next function which logs the message.
function firstFunction() {
    // Simulate a code delay
    setTimeout(function () {
      console.log("First function called");
    }, 1000);
  }
  function secondFunction() {
    console.log("Second function called");
  }
  firstFunction();
  secondFunction();

// SETTIMEOUT
// The setTimeout() method is used to call a function or evaluate an expression 'after' a specified number of milliseconds. For example, let's log a message after 2 seconds using setTimeout method,
setTimeout(function () {
  console.log("Good Afternoon");
}, 2000);

//Q10.What is an event loop and call stack.

//Event loop:Javascript has a runtime model based on an event loop,which is responsible for executing the code,collecting and processing events,and executing queued sub-tasks.

//Call stack: A call stack is a mechanism for an interpreter(like the Javascript interpreter in a web browser) to keep track of its place in a script that calls multiple functions - what function
//is currently being run and what functions are called from within that function,etc
    </script>


    
</body>
</html>
